'use strict';
// ==============================================================================
//        MODULE DE CONNEXION √Ä LA BASE DE DONN√âES MONGODB (AVEC MONGOOSE)
//
// Fournit :
// - Connexion robuste √† MongoDB
// - Gestion des erreurs et des √©v√©nements
// - Arr√™t propre (graceful shutdown)
// - Journalisation centralis√©e via Winston
// ==============================================================================

const mongoose = require('mongoose');
const { logger } = require('../middleware/logger');

// --- Options de connexion Mongoose ---
const connectionOptions = {
  maxPoolSize: 15, // Limite le nombre de connexions simultan√©es
  serverSelectionTimeoutMS: 10000, // Timeout si le serveur ne r√©pond pas
  socketTimeoutMS: 60000, // Timeout sur les sockets inactifs
  family: 4, // IPv4 uniquement pour √©viter les erreurs DNS
};

/**
 * √âtablit une connexion √† MongoDB.
 */
const connectDB = async () => {
  const dbUri = process.env.MONGODB_URI;

  if (!dbUri) {
    logger.error('‚ùå ERREUR CRITIQUE : La variable d\'environnement MONGODB_URI est manquante.');
    process.exit(1);
  }

  try {
    mongoose.set('strictQuery', true); // √âvite les requ√™tes ambigu√´s
    logger.info('üì° Tentative de connexion √† MongoDB...');
    await mongoose.connect(dbUri, connectionOptions);
  } catch (err) {
    logger.error(`‚ùå √âchec initial de connexion √† MongoDB : ${err.message}`, { error: err });
    process.exit(1);
  }
};

// --- √âv√©nements de la connexion Mongoose ---
mongoose.connection.on('connected', () => {
  const db = mongoose.connection;
  logger.info('====================================================');
  logger.info('‚úÖ Connexion MongoDB √©tablie avec succ√®s');
  logger.info(`   üî∏ H√¥te      : ${db.host}`);
  logger.info(`   üî∏ Port      : ${db.port}`);
  logger.info(`   üî∏ Base      : ${db.name}`);
  logger.info('====================================================');
});

mongoose.connection.on('error', (err) => {
  logger.error('‚ö†Ô∏è Erreur de connexion MongoDB apr√®s connexion initiale', {
    message: err.message,
    stack: err.stack,
  });
});

mongoose.connection.on('disconnected', () => {
  logger.warn('‚ö†Ô∏è D√©connexion d√©tect√©e : MongoDB d√©connect√©.');
});

mongoose.connection.on('reconnected', () => {
  logger.info('üîÅ Reconnexion √† MongoDB r√©ussie.');
});

/**
 * Ferme proprement la connexion MongoDB.
 */
const disconnectDB = async () => {
  logger.info('üîå Fermeture de la connexion MongoDB...');
  try {
    await mongoose.connection.close();
    logger.info('‚úÖ Connexion MongoDB ferm√©e correctement.');
  } catch (err) {
    logger.error('‚ùå Erreur lors de la fermeture de la connexion MongoDB', { error: err });
  }
};

module.exports = {
  connectDB,
  disconnectDB,
};
