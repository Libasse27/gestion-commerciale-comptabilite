// ==============================================================================
//           Seeder pour les Permissions et les R√¥les (RBAC) - Version Finale
//
// R√¥le : Ce script est le c≈ìur de la configuration du contr√¥le d'acc√®s.
// Il garantit que toutes les permissions n√©cessaires existent, puis cr√©e les
// r√¥les et leur assigne les permissions appropri√©es.
//
// NOTE IMPORTANTE : Ce script doit √™tre ex√©cut√© AVANT le seeder des utilisateurs.
//
// Usage : `node server/seeds/roles.js` ou via un script npm `npm run seed:roles`
// ==============================================================================

const mongoose = require('mongoose');
const dotenv = require('dotenv');

// --- Chargement des d√©pendances et mod√®les ---
dotenv.config({ path: './server/.env' });

const Role = require('../models/auth/Role');
const Permission = require('../models/auth/Permission');

// --- 1. Source de V√©rit√© : D√©finition de toutes les permissions de l'application ---
const allPermissions = [
  // Clients
  { name: 'create:client', description: 'Cr√©er un nouveau client' },
  { name: 'read:client', description: 'Lire les donn√©es des clients' },
  { name: 'update:client', description: 'Mettre √† jour un client' },
  { name: 'delete:client', description: 'Supprimer un client' },

  // Fournisseurs
  { name: 'create:fournisseur', description: 'Cr√©er un nouveau fournisseur' },
  { name: 'read:fournisseur', description: 'Lire les donn√©es des fournisseurs' },
  { name: 'update:fournisseur', description: 'Mettre √† jour un fournisseur' },
  { name: 'delete:fournisseur', description: 'Supprimer un fournisseur' },
  
  // Produits & Stocks
  { name: 'create:produit', description: 'Cr√©er un nouveau produit' },
  { name: 'read:produit', description: 'Lire les donn√©es des produits' },
  { name: 'update:produit', description: 'Mettre √† jour un produit' },
  { name: 'delete:produit', description: 'Supprimer un produit' },
  { name: 'manage:stock', description: 'G√©rer les stocks (mouvements, inventaires)' },
  
  // Ventes (Devis, Commandes, BL)
  { name: 'create:vente', description: 'Cr√©er des devis et commandes' },
  { name: 'read:vente', description: 'Voir tous les documents de vente' },
  { name: 'update:vente', description: 'Modifier des documents de vente' },
  { name: 'validate:vente', description: 'Valider des documents (passer de devis √† commande, etc.)' },
  
  // Facturation
  { name: 'create:facture', description: 'Cr√©er des factures' },
  { name: 'read:facture', description: 'Lire les factures' },
  { name: 'update:facture', description: 'Mettre √† jour des factures' },
  { name: 'delete:facture', description: 'Supprimer des factures' },

  // Comptabilit√©
  { name: 'read:comptabilite', description: 'Acc√©der aux journaux, grand livre, etc.' },
  { name: 'manage:comptabilite', description: 'G√©rer les √©critures et le plan comptable' },

  // Utilisateurs & R√¥les
  { name: 'create:user', description: 'Cr√©er un nouvel utilisateur' },
  { name: 'read:user', description: 'Lire les donn√©es des utilisateurs' },
  { name: 'update:user', description: 'Mettre √† jour un utilisateur' },
  { name: 'delete:user', description: 'Supprimer un utilisateur' },
  { name: 'manage:role', description: 'G√©rer les r√¥les et permissions' },
    
  // Administration & Rapports
  { name: 'read:rapport', description: 'Consulter les rapports d\'analyse' },
  { name: 'manage:settings', description: 'G√©rer les param√®tres de l\'application' },
];

// --- 2. D√©finition des R√¥les et de leurs Permissions associ√©es ---
const rolesToCreate = [
  {
    name: 'Vendeur',
    description: 'Peut g√©rer ses propres clients et cr√©er des documents de vente.',
    permissions: ['create:client', 'read:client', 'update:client', 'create:vente', 'read:vente']
  },
  {
    name: 'Commercial',
    description: 'G√®re tout le cycle commercial, des produits aux clients et ventes.',
    permissions: [
      'create:client', 'read:client', 'update:client', 'delete:client',
      'create:fournisseur', 'read:fournisseur', 'update:fournisseur',
      'create:produit', 'read:produit', 'update:produit',
      'manage:stock',
      'create:vente', 'read:vente', 'update:vente', 'validate:vente',
      'create:facture', 'read:facture', 'read:rapport'
    ]
  },
  {
    name: 'Comptable',
    description: 'G√®re la comptabilit√©, les factures et a un acc√®s en lecture aux donn√©es commerciales.',
    permissions: [
      'read:client', 'read:fournisseur', 'read:produit', 'read:vente',
      'create:facture', 'read:facture', 'update:facture', 'delete:facture',
      'read:comptabilite', 'manage:comptabilite', 'read:rapport'
    ]
  },
  {
    name: 'Admin',
    description: 'Administrateur du syst√®me avec un acc√®s complet √† toutes les fonctionnalit√©s.',
    permissions: '*' // Le joker '*' signifie "toutes les permissions"
  }
];


/**
 * Fonction principale du seeder.
 */
const seedRolesAndPermissions = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ Connexion √† MongoDB r√©ussie pour le seeder des r√¥les.');

    // --- √âtape A : Cr√©er/Mettre √† jour toutes les permissions ---
    console.log('‚è≥ Synchronisation des permissions...');
    for (const p of allPermissions) {
      // `findOneAndUpdate` avec `upsert: true` va cr√©er la permission si elle n'existe pas,
      // ou la mettre √† jour si sa description a chang√©. C'est idempotent.
      await Permission.findOneAndUpdate({ name: p.name }, p, { upsert: true });
    }
    console.log(`-> ${allPermissions.length} permissions synchronis√©es.`);

    // --- √âtape B : R√©cup√©rer toutes les permissions pour les mapper aux r√¥les ---
    const allPermissionsFromDB = await Permission.find({});
    // On cr√©e une Map pour un acc√®s instantan√© √† l'ID par le nom (plus performant)
    const permissionMap = new Map(allPermissionsFromDB.map(p => [p.name, p._id]));

    // --- √âtape C : Nettoyer et cr√©er les r√¥les ---
    console.log('üßπ Nettoyage de la collection "roles"...');
    await Role.deleteMany({});
    
    console.log('‚è≥ Cr√©ation des r√¥les...');
    for (const roleData of rolesToCreate) {
      let permissionIds;

      if (roleData.permissions === '*') {
        // Pour l'admin, on assigne toutes les permissions
        permissionIds = [...permissionMap.values()];
      } else {
        // Pour les autres r√¥les, on mappe les noms de permissions √† leurs IDs
        permissionIds = roleData.permissions.map(permissionName => {
          const permissionId = permissionMap.get(permissionName);
          if (!permissionId) {
            throw new Error(`Permission "${permissionName}" non trouv√©e pour le r√¥le "${roleData.name}".`);
          }
          return permissionId;
        });
      }
      
      await Role.create({
        name: roleData.name,
        description: roleData.description,
        permissions: permissionIds,
      });
    }
    console.log(`-> ${rolesToCreate.length} r√¥les ont √©t√© cr√©√©s avec succ√®s.`);

  } catch (error) {
    console.error('‚ùå Erreur lors du seeding des r√¥les et permissions :', error);
    process.exit(1);
  } finally {
    await mongoose.connection.close();
    console.log('üîå Connexion √† MongoDB ferm√©e.');
  }
};

// --- Lancement du Seeder ---
seedRolesAndPermissions();