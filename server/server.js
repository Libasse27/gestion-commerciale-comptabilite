// ==============================================================================
//        POINT D'ENTR√âE PRINCIPAL DU SERVEUR
//
// Ce fichier orchestre :
// - le d√©marrage de l'application Express,
// - la connexion aux services externes (MongoDB, Redis),
// - l'initialisation de Socket.IO,
// - l'ex√©cution des t√¢ches planifi√©es,
// - la gestion des √©v√©nements syst√®me critiques pour un arr√™t propre.
// ==============================================================================

// --- 1. Chargement des variables d'environnement ---
require('dotenv').config();

// --- 2. D√©pendances ---
const http = require('http');
const app = require('./app');
const { connectDB, disconnectDB } = require('./config/database');
const { initSocket } = require('./config/socket');
const { initializeCronJobs } = require('./jobs/cronJobs');
const { logger } = require('./middleware/logger');
const { connectRedis, redisClient } = require('./config/redis'); // Ajout de Redis

// --- 3. Configuration ---
const PORT = process.env.PORT || 5000;
const ENV = process.env.NODE_ENV || 'development';

// --- 4. Fermeture propre (Graceful Shutdown) ---
async function shutdown(serverInstance, code = 0) {
  logger.info('üõë Fermeture du serveur en cours...');
  try {
    // Fermer Redis d'abord
    if (redisClient.isOpen) {
      await redisClient.quit();
      logger.info('Connexion Redis ferm√©e.');
    }
    // Puis la base de donn√©es
    await disconnectDB();

    // Enfin, le serveur HTTP
    serverInstance.close(() => {
      logger.info('‚úÖ Serveur arr√™t√© proprement.');
      process.exit(code);
    });
  } catch (err) {
    logger.error('‚ùå Erreur lors de l\'arr√™t du serveur', { error: err });
    process.exit(1);
  }
}

// --- 5. Gestion des √©v√©nements syst√®me ---
function setupProcessEventListeners(serverInstance) {
  process.on('unhandledRejection', (reason) => {
    logger.error('üí• Rejet de promesse non g√©r√©. L\'application va s\'arr√™ter.', { reason });
    throw reason;
  });

  process.on('uncaughtException', async (err) => {
    logger.error('üí• Exception non intercept√©e. Arr√™t brutal du serveur...', { error: err });
    await shutdown(serverInstance, 1);
  });

  process.on('SIGTERM', async () => {
    logger.warn('‚ö†Ô∏è Signal SIGTERM re√ßu. Fermeture propre du serveur...');
    await shutdown(serverInstance, 0);
  });

  process.on('SIGINT', async () => {
    logger.warn('‚ö†Ô∏è Signal SIGINT (Ctrl+C) re√ßu. Fermeture propre du serveur...');
    await shutdown(serverInstance, 0);
  });
}

// --- 6. D√©marrage du serveur ---
async function startServer() {
  logger.info('====================================================');
  logger.info('üöÄ Lancement du serveur...');
  logger.info(`üîß Environnement : ${ENV}`);
  logger.info('====================================================');

  try {
    // Connexion aux services externes
    await connectDB();
    await connectRedis();

    // Cr√©ation du serveur HTTP
    const server = http.createServer(app);

    // Initialisation de Socket.IO
    initSocket(server);

     // Lancement du serveur
    const serverInstance = server.listen(PORT, () => {
      logger.info('====================================================');
      logger.info('‚úÖ Serveur en ligne !');
      logger.info(`üåç Port         : ${PORT}`);
      logger.info(`üß¨ PID          : ${process.pid}`);
      logger.info('====================================================');
    });

    // √âcoute des √©v√©nements critiques (crash, Ctrl+C...)
    setupProcessEventListeners(serverInstance);

    // Initialisation des t√¢ches planifi√©es
    initializeCronJobs();

  } catch (error) {
    logger.error('‚ùå √âchec critique du d√©marrage du serveur', { error });
    process.exit(1);
  }
}

// --- 7. Lancer ---
startServer();