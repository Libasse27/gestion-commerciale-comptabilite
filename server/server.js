// ==============================================================================
//        POINT D'ENTR√âE PRINCIPAL ET ORCHESTRATEUR DU SERVEUR
//
// Ce fichier est responsable du cycle de vie du serveur :
// 1. Chargement des variables d'environnement.
// 2. Connexion √† la base de donn√©es.
// 3. Cr√©ation et d√©marrage du serveur HTTP.
// 4. Initialisation de Socket.IO pour le temps r√©el.
// 5. Gestion des arr√™ts propres (graceful shutdown) et des erreurs critiques.
// ==============================================================================

// --- Chargement des variables d'environnement (DOIT √äTRE FAIT EN PREMIER) ---
require('dotenv').config();

const http = require('http');
const app = require('./app'); // Importation de l'application Express configur√©e
const { connectDB, disconnectDB } = require('./config/database');
const { initSocket } = require('./config/socket'); // Importation de l'initialiseur Socket.IO

/**
 * G√®re les arr√™ts propres en cas d'erreurs critiques ou de signaux syst√®me.
 * @param {http.Server} serverInstance L'instance du serveur √† fermer.
 */
function setupProcessEventListeners(serverInstance) {
  process.on('unhandledRejection', async (err) => {
    console.error('ERREUR NON G√âR√âE (PROMESSE)! üí• Arr√™t progressif...', err);
    await disconnectDB();
    serverInstance.close(() => process.exit(1));
  });

  process.on('uncaughtException', (err) => {
    console.error('EXCEPTION NON INTERCEPT√âE! üí• Arr√™t imm√©diat...', err);
    // Pour ce type d'erreur, il n'est pas s√ªr de continuer, donc on arr√™te brutalement.
    process.exit(1);
  });

  process.on('SIGINT', async () => {
    console.warn('Signal SIGINT re√ßu. D√©marrage de l\'arr√™t propre du serveur...');
    await disconnectDB();
    serverInstance.close(() => {
      console.info('Serveur arr√™t√© proprement.');
      process.exit(0);
    });
  });
}

/**
 * Fonction principale asynchrone pour d√©marrer l'application.
 */
async function startServer() {
  try {
    console.log('====================================================');
    console.log('üöÄ D√©marrage du serveur...');
    console.log('====================================================');

    // --- S√âQUENCE DE D√âMARRAGE ---
    await connectDB(); // √âtape 1: Connexion √† la base de donn√©es

    const server = http.createServer(app); // √âtape 2: Cr√©ation du serveur HTTP avec l'app Express

    initSocket(server); // √âtape 3: Initialisation de Socket.IO et attachement au serveur HTTP

    const PORT = process.env.PORT || 5001;
    const serverInstance = server.listen(PORT, () => { // √âtape 4: D√©marrage de l'√©coute
      console.log('====================================================');
      console.log('‚úÖ SERVEUR D√âMARR√â AVEC SUCC√àS');
      console.log(`   - Mode       : ${process.env.NODE_ENV || 'development'}`);
      console.log(`   - Port       : ${PORT}`);
      console.log(`   - Origine Client Autoris√©e : ${process.env.CORS_ORIGIN}`);
      console.log('====================================================');
    });

    setupProcessEventListeners(serverInstance); // √âtape 5: Mise en place des √©couteurs pour l'arr√™t propre

  } catch (error) {
    console.error('‚ùå √âchec critique lors de la s√©quence de d√©marrage du serveur.', error);
    process.exit(1);
  }
}

// --- Lancement de l'application ---
startServer();